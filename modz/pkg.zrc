
# package module

# If you have made *no* changes:
#     git pull

# If you *have* made changes and mistakenly committed them to "master",
# do the following to put your changes on a private branch, "br", and
# to restore master to its unmodified (relative-to-upstream) state:
#     git checkout -b br
#     git checkout master
#     git reset --hard origin

export cmd
export wd
export PKG
export PKG_RETURN_DIR
export PKG_STK=()
export PKG_FILENAME="pkg.sh"
export PKG_LS_OPTS="-I 'node_modules' -I '.*' -I 'zzz*' -I '_*' -I 'build'"
export PKG_FILE=""
export PKGS=""
export PKG_WD=""
export PKG_RUNNING=""
export PKG_DEBUG=0
export PKG_OUTSEP="  "
# ----------------------------------------------------
export PKGWD=""
export PKGZ_DIR="${ZRC_DIR}/pkgz"
# _PKG_LOADING_PIDS=()

alias pkg-i=pkg-install

pkg-mount ()
{
    mkdir -p "$1"
    PKGWD="`realpath ${1}`"
}
pkg-needs-install ()
{
    if [[ -d "${PKGWD}/${1}" ]] ; then
        return 0;
    else
        return 1;
    fi
}
pkg-needs-init () # TODO:
{
    return 1;
}
pkg-reload ()
{

}
pkg-install ()
{
    ":" ()
    {
        print "\t\t: $1"
        if (($#argv)) ; then
            local key="$1";
            shift;
            eval "pkg_${_NAME_}[$key]=\"$argv\";"
            case $key in
                wd) wd="$argv" ;;
            esac
        fi
    }
    name: ()
    {
        print "\t$1"
        _NAME_="$1"
        # alias :="pkg:_set ${_NAME_}"
        type "pkg_${_NAME_}" >/dev/null &&
            unset -f "pkg_${_NAME_}";

        eval "[ \${#pkg_${_NAME_}} ] && unset \"pkg_${_NAME_}\"";
        typeset -gA "pkg_${_NAME_}";

        : name "$_NAME_"
        # : wd "$PKGWD"

        DEBUG "...pkg:BEGIN pkg_${_NAME_}"
        eval \
"' :'()
{
    local val=\"\$pkg_${_NAME_}[\$1]\";
    (( \$#val )) &&
    {
      echo -n \"\$val\"
    };
}"
    }

    PKGS=""

    pushd "$PKGWD"
    {
        while (($#argv)) ; do
            _pkg-install "$1"
            shift
        done

        # got_error
        # local err=0
        # local i=0
        # for pid in ${_PKG_LOADING_PIDS[@]}; do
        #     ((i++))
        #     wait "$pid";
        #     err=$?
        #     if (( $err > 0 )); then
        #         echo "\n\npkg:ERROR loading ${err}\n\n"
        #     fi
        # done
    } always {
        popd
    }



    # ls -1 ${1}/**/"${PKG_FILENAME}" ${=PKG_LS_OPTS} | while read -r p;
    # do
    #     _pkg-install-file "$p" # &&  tput rc;tput el             # rc = restore cursor, el = erase to end of line
    # done
    echo "|\npkg [" ${=PKGS} "]"
    unset -f ":"
    unset -f "name:"
}
_pkg-install ()
{

    local PKGZ_FILE="${PKGZ_DIR}/${1}.zrc"
    {
        print "+ \"$PKGZ_FILE\" "
        unset -f __install__ 2>/dev/null
        source "$PKGZ_FILE"
        __pkg-process-defs
    } always {
        # pkg-popid
        # (( TRY_BLOCK_ERROR = 0 ))
        # print "❌"
    }
    return $?
}
pkg ()
{
    # tput sc                                 # save cursor
    (( $# == 0 )) || [ $1 = "-h" ] &&
    {
        pkg-help
        return $?
    };
    # push pkg stack
    local _cmd=$cmd
    pkg-pushid $1
    local pk="pkg_$1"
    local cl=("$pk")
    shift;
    if (($#argv == 0)) ; then
        argv=(help)
    fi
    for a in $argv;
    do
        if [[ $a == "," ]] ; then
            ${cl}
            echo -n "$PKG_OUTSEP"
            cl=("$pk")
        else
            if (( $#cl == 1 )) ; then
                cmd=$a
                # cl+="$a"
                # continue
            elif [[ $a == ":" ]] ; then
                ${cl}
                echo -n "$PKG_OUTSEP"
                cl=("$pk")
            fi
            cl+="$a"
        fi
    done
    ${cl}                           # ??? [ ${args} ] &&
    local r=$?
    # pop pkg stack
    cmd=$_cmd
    pkg-popid
    return r
}
# ----------------------------------------------------
@ ()
{
    pkg "$PKG" $argv
}
@proto ()
{
    pkg:proto:${1} $argv[2,-1]
}
pkg:proto:set ()
{
    eval "pkg_${$PKG}[${1}]=\"${argv[2,-1]}\";"
}
pkg:proto:get ()
{
    eval "echo \$pkg_${$PKG}[${1}];"
}
pkg:proto:run ()
{
    @ cd
    ./"${1}" $argv[2,-1]
}
pkg:proto:uninstall ()
{
    @ cd ..
    rm -rf ./${PKG}
    if ((?)) ; then
        return 1
    fi
    echo pkg \"${PKG}\" uninstalled
    return 0
}
pkg:proto:reinstall ()
{
    @ cd
    @ uninstall
    pkg-install "$PKG"
}
pkg:proto:git ()
{
    @ cd
    git $argv
}
pkg:proto:pull ()
{
    @ cd
    git pull $argv
}
pkg:proto:make ()
{
    (( $#argv == 0 )) && argv=(`@ : TARGETS`);
    (( $#argv )) &&
    {
        # local wd=`@ : wd`
        local tgt
        # local tgtf
        local deps
        while (( $#argv ));
        do
            tgt=$1;
            shift;
            deps=(`@ : $tgt`)
            if (( $#deps )) ; then
# TODO: ?should we loop over deps for more MakeFile compat?
                if [ ! -f "${tgt}" ] || fs-ot "${tgt}" ${deps} ; then
                    @ ${tgt} ${deps}
                else
                    echo unchanged: $tgt
                fi
            else
                @ ${tgt}
            fi
        done
    }
}
pkg:proto:cd ()
{
    pkg-cd "$PKG" "$argv"
    PKG_RETURN_DIR="$PWD"
}
pkg:proto:pushd ()
{
    pkg-pushd "$PKG"
    PKG_RETURN_DIR="$PWD"
}
pkg:proto:popd ()
{
    pkg-popd
    PKG_RETURN_DIR="$PWD"
}

# ----------------------------------------------------

pkg-help ()
{
    echo "Usage: pkg --libs,--cflags PKG1 PKG2"
}
pkg-cd ()
{
    eval "local dir=\"\$pkg_${1}[wd]\""
    if (( $#argv > 1 )); then
        dir="$dir"/"${argv[2,-1]}"
    fi
    if [[ -d "$dir" ]]; then
        cd "$dir"
    else
        return $?
    fi
}
pkg-pushd ()
{
    # echo ":: pkg-pushd $1" WARNING: echo not here, add to thee argv
    eval "pushd -q  \"\$pkg_${1}[wd]\""
    # wd="$PWD"
}
pkg-popd ()
{
    popd -q
    # wd="$PWD"
}
pkg-pushid ()
{

    # current pkg name
    if [[ $PKG != $1 ]] ; then
        PKG="$1";
        eval "wd=\"\$pkg_${PKG}[wd]\""
    fi
    PKG_STK=($PKG $PKG_STK)
    # alias @="pkg $PKG"
}
pkg-popid ()
{
    PKG_STK=($PKG_STK[2,-1])
    (( $#PKG_STK > 0 )) &&
    {
        PKG=$PKG_STK[1]
        if (( $#PKG > 0 )) ; then
            eval "wd=\"\$pkg_${PKG}[wd]\""
        # else
        #   wd=""
        fi
        # alias @="pkg $PKG"
    }
}

# ----------------------------------------------------

__pkg-process-defs ()
{

    for f in ${(k)functions};
    do
        [[ "$f" =~ (^pkg[ ][^ ]+) ]] &&
        {
            local fn="$f"
            ___pkg-def ${=f}
# TODO:
            unset -f "$fn"
            # functions[$fn]=""
        }
    done
}
___pkg-def ()
{
    _pkg:BEGIN "$1" "$2"
    {
        for f in ${(k)functions};
        do
            [[ "$f" =~ (^[ ][^ ]+) ]] &&
            {
                argv=(${=f})
                print "\t\t$1 ()"
                functions[__${_NAME_}_${1}]="$functions[${f}]"
                unset "functions[$f]"
            }
        done

        # check if fn already exists? TODO: do better...
        if (( ! $#functions[pkg_${_NAME_}] )) ; then
            eval "\"${_NAME_}\" () { pkg \"$_NAME_\" \$argv }"
            # TODO: exportf "${_NAME_}"
        fi
                                        #TODO: throw / catch http://info2html.sourceforge.net/cgi-bin/info2html-demo/info2html?(zsh)Exception%2520Handling#:~:text=Note%20that%20as%20exceptions%20are,name%20of%20the%20exception%20caught.


    # pkg-pushd \"${_NAME_}\"
    # pkg-popd
        functions[pkg_${_NAME_}]="
    pkg-pushid \"${_NAME_}\"
    local end_wd=\"\$PKG_RETURN_DIR\"
    PKG_RETURN_DIR=\"\$PWD\"
    local r=1
    {
        if (( \$#functions[__${_NAME_}_\$1] )) ; then
            \"__${_NAME_}_\$1\" \$argv[2,-1]
            r=\$?
        elif (( \$#argv )) ; then
            if which \"pkg:proto:\$1\" >/dev/null ; then
                \"pkg:proto:\$1\" \$argv[2,-1]
                r=\$?
            else
                echo ERROR: ${_NAME_}: cmd \"\$1\" not found
            fi
        fi
    } always {
        pkg-popid
        if [[ \"\$d\" != \"\$PWD\" ]]  ; then
            cd \"\$PKG_RETURN_DIR\"
        fi
        PKG_RETURN_DIR=\"\$end_wd\"
    }
    return \$r
"
    # "PKG_${_NAME_}_exists"
    # TODO: export var exists??

    } always {
        _pkg:END
    }
}
_pkg:BEGIN ()
{
    DEBUG "pkg:BEGIN"
    _NAME_=""
    local _id="$2"
    pkg-pushid "$_id"
    name: "$_id"
    # call the function
    "$1 $_id"
}
_pkg:END ()
{
    local _id="$PKG"
    {
        type __install__ >/dev/null
        echo "pkg-has-install" $_id " PWD=" $PWD
        if (( $? == 0 )) ; then
            echo "pkg-needs-install" $_id
            pkg-needs-install "$_id"
            if (( $? == 1 )) ; then
                # alias @="pkg ${_id}"
                __install__
                # eval "@ () { pkg ${_id} \$argv }"
                # export -f @
                # $(__install__) &
                # _PKG_LOADING_PIDS+=($!)
                # unset -f @
            fi
            unset -f __install__ 2>/dev/null
        fi

        type __init__ >/dev/null
        if (( $? == 0 )) ; then
            pkg-needs-init "$_id"
            if (( $? == 1 )) ; then
                # alias @="pkg ${_id}"
                __init__
            fi
            unset -f __init__ 2>/dev/null
        fi
    } always {
        pkg-popid
        DEBUG "pkg:END"
        PKGS="$PKGS $_NAME_"
        unset _NAME_
    }
}

# ----------------------------------------------------

prin ()
{
    echo -n " " $@
}
DEBUG ()
{
    (( $PKG_DEBUG > 0 )) && print "// $@"
}

# ====================================================
# ====================================================
# [[ $1 == "pkgz" ]] && argv=(./)
# pkgz $argv
# (($#argv)) || $argv=(./)

# ====================================================
# ====================================================
